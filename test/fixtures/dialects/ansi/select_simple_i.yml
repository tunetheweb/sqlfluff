# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: da1306224a6a569779f9f0e243d9a2a9dbac32ec510943d4902cfcbdd692ac8b
file:
  statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          column_reference:
            identifier: raw_column
      - comma: ','
      - select_clause_element:
          column_reference:
          - identifier: raw_sch
          - dot: .
          - identifier: raw_col
      - comma: ','
      - select_clause_element:
          column_reference:
            identifier: simple_explicit
          alias_expression:
            keyword: as
            identifier: aliased_column_1
      - comma: ','
      - select_clause_element:
          column_reference:
            identifier: simple_implicit
          alias_expression:
            identifier: aliased_column_2
      - comma: ','
      - select_clause_element:
          expression:
          - column_reference:
              identifier: an_unaliased
          - binary_operator: +
          - column_reference:
              identifier: calculation
      - comma: ','
      - select_clause_element:
          expression:
          - column_reference:
              identifier: an_explicitly
          - binary_operator: '-'
          - column_reference:
              identifier: aliased
          alias_expression:
            keyword: as
            identifier: calculation
      - comma: ','
      - select_clause_element:
          literal: "'an unalised string'"
      - comma: ','
      - select_clause_element:
          literal: '123.6'
      - comma: ','
      - select_clause_element:
          numeric_literal:
            sign_indicator: '-'
            literal: '786'
          alias_expression:
            keyword: as
            identifier: aliased_column3
      from_clause:
        keyword: FROM
        from_expression:
        - from_expression_element:
            table_expression:
              table_reference:
                identifier: unaliased
        - join_clause:
            keyword: JOIN
            from_expression_element:
              table_expression:
                table_reference:
                  identifier: aliased_1
              alias_expression:
                keyword: as
                identifier: foo
        - join_clause:
          - keyword: JOIN
          - from_expression_element:
              table_expression:
                table_reference:
                  identifier: aliased_2
              alias_expression:
                identifier: bar
          - keyword: USING
          - bracketed:
              start_bracket: (
              identifier: b
              end_bracket: )
