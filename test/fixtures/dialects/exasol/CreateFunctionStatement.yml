# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 19edbb5f9ab43a54ea88bff6779c6e1a518f909eb2df6a642280db43f6260062
file:
- statement:
    create_function_statement:
    - keyword: CREATE
    - binary_operator: OR
    - keyword: REPLACE
    - keyword: FUNCTION
    - function_reference:
        identifier: percentage
    - bracketed:
      - start_bracket: (
      - identifier: fraction
      - data_type:
          keyword: DECIMAL
      - comma: ','
      - identifier: entirety
      - data_type:
          keyword: DECIMAL
      - end_bracket: )
    - keyword: RETURN
    - data_type:
        keyword: VARCHAR
        bracketed:
          start_bracket: (
          literal: '10'
          end_bracket: )
    - keyword: AS
    - variable: res
    - data_type:
        keyword: DECIMAL
    - statement_terminator: ;
    - keyword: BEGIN
    - function_body:
        function_assignment:
          variable: res
          assignment_operator: :=
          expression:
            bracketed:
              start_bracket: (
              expression:
                literal: '100'
                binary_operator: '*'
                column_reference:
                  identifier: fraction
              end_bracket: )
            binary_operator: /
            column_reference:
              identifier: entirety
          statement_terminator: ;
    - keyword: RETURN
    - expression:
        column_reference:
          identifier: res
        binary_operator:
        - pipe: '|'
        - pipe: '|'
        literal: "' %'"
    - statement_terminator: ;
    - keyword: END
    - function_reference:
        identifier: percentage
    - statement_terminator: ;
- function_script_terminator: /
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_reference:
        identifier: hello
    - bracketed:
        start_bracket: (
        end_bracket: )
    - keyword: RETURN
    - data_type:
        keyword: VARCHAR
        bracketed:
          start_bracket: (
          literal: '10'
          end_bracket: )
    - keyword: AS
    - variable: res
    - data_type:
        keyword: DECIMAL
    - statement_terminator: ;
    - keyword: BEGIN
    - function_body:
        function_assignment:
          variable: res
          assignment_operator: :=
          function:
            function_name:
              identifier: hello
              dot: .
              function_name_identifier: world
            bracketed:
              start_bracket: (
              expression:
                column_reference:
                  identifier: '"no"'
              end_bracket: )
          statement_terminator: ;
    - keyword: RETURN
    - expression:
        literal: "'HELLO'"
    - statement_terminator: ;
    - keyword: END
    - function_reference:
        identifier: hello
    - statement_terminator: ;
- function_script_terminator: /
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_reference:
        identifier: case_function
    - bracketed:
        start_bracket: (
        end_bracket: )
    - keyword: RETURN
    - data_type:
        keyword: VARCHAR
        bracketed:
          start_bracket: (
          literal: '10'
          end_bracket: )
    - keyword: AS
    - variable: res
    - data_type:
        keyword: DECIMAL
    - statement_terminator: ;
    - keyword: BEGIN
    - function_body:
        function_assignment:
          variable: res
          assignment_operator: :=
          expression:
            case_expression:
            - keyword: CASE
            - when_clause:
              - keyword: WHEN
              - expression:
                  column_reference:
                    identifier: input_variable
                  comparison_operator:
                    raw_comparison_operator: <
                  literal: '0'
              - keyword: THEN
              - expression:
                  literal: '0'
            - else_clause:
                keyword: ELSE
                expression:
                  column_reference:
                    identifier: input_variable
            - keyword: END
          statement_terminator: ;
    - keyword: RETURN
    - expression:
        column_reference:
          identifier: res
    - statement_terminator: ;
    - keyword: END
    - function_reference:
        identifier: case_function
    - statement_terminator: ;
- function_script_terminator: /
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_reference:
        identifier: assignment_function
    - bracketed:
        start_bracket: (
        end_bracket: )
    - keyword: RETURN
    - data_type:
        keyword: VARCHAR
        bracketed:
          start_bracket: (
          literal: '10'
          end_bracket: )
    - keyword: AS
    - variable: res
    - data_type:
        keyword: DECIMAL
    - statement_terminator: ;
    - keyword: BEGIN
    - function_body:
        function_assignment:
          variable: res
          assignment_operator: :=
          literal: "'Hello World'"
          statement_terminator: ;
    - keyword: RETURN
    - expression:
        column_reference:
          identifier: res
    - statement_terminator: ;
    - keyword: END
    - function_reference:
        identifier: assignment_function
    - statement_terminator: ;
- function_script_terminator: /
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_reference:
        identifier: if_function
    - bracketed:
        start_bracket: (
        end_bracket: )
    - keyword: RETURN
    - data_type:
        keyword: VARCHAR
        bracketed:
          start_bracket: (
          literal: '10'
          end_bracket: )
    - keyword: AS
    - variable: res
    - data_type:
        keyword: DECIMAL
    - statement_terminator: ;
    - keyword: BEGIN
    - function_body:
        function_if_branch:
        - keyword: IF
        - expression:
            column_reference:
              identifier: input_variable
            comparison_operator:
              raw_comparison_operator: '='
            literal: '0'
        - keyword: THEN
        - function_body:
            function_assignment:
            - variable: res
            - assignment_operator: :=
            - variable: 'NULL'
            - statement_terminator: ;
        - keyword: ELSEIF
        - expression:
            column_reference:
              identifier: input_variable
            comparison_operator:
              raw_comparison_operator: '='
            literal: '1'
        - keyword: THEN
        - function_body:
            function_assignment:
              variable: res
              assignment_operator: :=
              literal: "'HELLO'"
              statement_terminator: ;
        - keyword: ELSEIF
        - expression:
            column_reference:
              identifier: input_variable
            comparison_operator:
              raw_comparison_operator: '='
            literal: '2'
        - keyword: THEN
        - function_body:
            function_assignment:
              variable: res
              assignment_operator: :=
              literal: "'HALLO'"
              statement_terminator: ;
        - keyword: ELSE
        - function_body:
            function_assignment:
            - variable: res
            - assignment_operator: :=
            - variable: input_variable
            - statement_terminator: ;
        - keyword: END
        - keyword: IF
        - statement_terminator: ;
    - keyword: RETURN
    - expression:
        column_reference:
          identifier: res
    - statement_terminator: ;
    - keyword: END
    - function_reference:
        identifier: if_function
    - statement_terminator: ;
- function_script_terminator: /
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_reference:
        identifier: for_loop_function
    - bracketed:
        start_bracket: (
        end_bracket: )
    - keyword: RETURN
    - data_type:
        keyword: VARCHAR
        bracketed:
          start_bracket: (
          literal: '10'
          end_bracket: )
    - keyword: AS
    - variable: res
    - data_type:
        keyword: DECIMAL
    - statement_terminator: ;
    - keyword: BEGIN
    - function_body:
        function_for_loop:
        - keyword: FOR
        - identifier: cnt
        - assignment_operator: :=
        - expression:
            literal: '1'
        - keyword: TO
        - expression:
            column_reference:
              identifier: input_variable
        - keyword: DO
        - function_body:
            function_assignment:
              variable: res
              assignment_operator: :=
              expression:
                column_reference:
                  identifier: res
                binary_operator: '*'
                literal: '2'
              statement_terminator: ;
        - keyword: END
        - keyword: FOR
        - statement_terminator: ;
    - keyword: RETURN
    - expression:
        column_reference:
          identifier: res
    - statement_terminator: ;
    - keyword: END
    - function_reference:
        identifier: for_loop_function
    - statement_terminator: ;
- function_script_terminator: /
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_reference:
        identifier: for_loop_function2
    - bracketed:
        start_bracket: (
        end_bracket: )
    - keyword: RETURN
    - data_type:
        keyword: VARCHAR
        bracketed:
          start_bracket: (
          literal: '10'
          end_bracket: )
    - keyword: AS
    - variable: res
    - data_type:
        keyword: DECIMAL
    - statement_terminator: ;
    - keyword: BEGIN
    - function_body:
        function_for_loop:
        - keyword: FOR
        - identifier: cnt
        - keyword: IN
        - expression:
            literal: '1'
        - range_operator: ..
        - expression:
            literal: '10'
        - keyword: LOOP
        - function_body:
            function_assignment:
              variable: res
              assignment_operator: :=
              expression:
                column_reference:
                  identifier: res
                binary_operator: '*'
                literal: '2'
              statement_terminator: ;
        - keyword: END
        - keyword: LOOP
        - statement_terminator: ;
    - keyword: RETURN
    - expression:
        column_reference:
          identifier: res
    - statement_terminator: ;
    - keyword: END
    - function_reference:
        identifier: for_loop_function2
    - statement_terminator: ;
- function_script_terminator: /
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_reference:
        identifier: for_loop_function3
    - bracketed:
        start_bracket: (
        end_bracket: )
    - keyword: RETURN
    - data_type:
        keyword: VARCHAR
        bracketed:
          start_bracket: (
          literal: '10'
          end_bracket: )
    - keyword: AS
    - variable: res
    - data_type:
        keyword: DECIMAL
    - statement_terminator: ;
    - keyword: BEGIN
    - function_body:
        function_while_loop:
        - keyword: WHILE
        - expression:
          - column_reference:
              identifier: cnt
          - comparison_operator:
            - raw_comparison_operator: <
            - raw_comparison_operator: '='
          - column_reference:
              identifier: input_variable
        - keyword: DO
        - function_body:
            function_assignment:
              variable: res
              assignment_operator: :=
              expression:
                column_reference:
                  identifier: res
                binary_operator: '*'
                literal: '2'
              statement_terminator: ;
        - function_body:
            function_assignment:
              variable: cnt
              assignment_operator: :=
              expression:
                column_reference:
                  identifier: cnt
                binary_operator: +
                literal: '1'
              statement_terminator: ;
        - keyword: END
        - keyword: WHILE
        - statement_terminator: ;
    - keyword: RETURN
    - expression:
        column_reference:
          identifier: res
    - statement_terminator: ;
    - keyword: END
    - function_reference:
        identifier: for_loop_function3
    - statement_terminator: ;
- function_script_terminator: /
- statement:
    create_function_statement:
    - keyword: CREATE
    - keyword: FUNCTION
    - function_reference:
      - identifier: schem
      - dot: .
      - identifier: func
    - bracketed:
      - start_bracket: (
      - identifier: p1
      - data_type:
          keyword: VARCHAR
          bracketed:
            start_bracket: (
            literal: '6'
            end_bracket: )
      - comma: ','
      - identifier: p2
      - data_type:
          keyword: VARCHAR
          bracketed:
            start_bracket: (
            literal: '10'
            end_bracket: )
      - end_bracket: )
    - keyword: RETURN
    - data_type:
        keyword: VARCHAR
        bracketed:
          start_bracket: (
          literal: '20'
          end_bracket: )
    - keyword: IS
    - variable: res
    - data_type:
        keyword: VARCHAR
        bracketed:
          start_bracket: (
          literal: '20'
          end_bracket: )
    - statement_terminator: ;
    - keyword: BEGIN
    - function_body:
        function_if_branch:
        - keyword: IF
        - expression:
          - column_reference:
              identifier: p1
          - keyword: IS
          - keyword: NOT
          - keyword: 'NULL'
          - binary_operator: AND
          - column_reference:
              identifier: p2
          - keyword: IS
          - keyword: NOT
          - keyword: 'NULL'
        - keyword: THEN
        - function_body:
            function_if_branch:
            - keyword: IF
            - expression:
                column_reference:
                  identifier: p1
                comparison_operator:
                  raw_comparison_operator: '='
                literal: '1'
            - keyword: THEN
            - function_body:
                function_assignment:
                  variable: res
                  assignment_operator: :=
                  literal: "'Hello World'"
                  statement_terminator: ;
            - keyword: ELSE
            - function_body:
                function_if_branch:
                - keyword: IF
                - expression:
                    column_reference:
                      identifier: p2
                    comparison_operator:
                      raw_comparison_operator: '='
                    literal: '3'
                - keyword: THEN
                - function_body:
                    function_assignment:
                      variable: res
                      assignment_operator: :=
                      literal: "'ABC'"
                      statement_terminator: ;
                - keyword: END
                - keyword: IF
                - statement_terminator: ;
            - function_body:
                function_assignment:
                  variable: res
                  assignment_operator: :=
                  literal: "'WOHOOOO'"
                  statement_terminator: ;
            - keyword: END
            - keyword: IF
            - statement_terminator: ;
        - keyword: END
        - keyword: IF
        - statement_terminator: ;
    - keyword: RETURN
    - expression:
        column_reference:
          identifier: res
    - statement_terminator: ;
    - keyword: END
    - function_reference:
      - identifier: schem
      - dot: .
      - identifier: func
    - statement_terminator: ;
- function_script_terminator: /
