# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 4d356aa40e2cb86273e0b9b49cb717d28ad973e942507997996d6968c2c32cac
file:
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
          - keyword: ARRAY
          - array_literal:
            - start_square_bracket: '['
            - expression:
                literal: '1'
            - comma: ','
            - expression:
                literal: '2'
            - end_square_bracket: ']'
          - binary_operator:
            - pipe: '|'
            - pipe: '|'
          - keyword: ARRAY
          - array_literal:
            - start_square_bracket: '['
            - expression:
                literal: '3'
            - comma: ','
            - expression:
                literal: '4'
            - end_square_bracket: ']'
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          keyword: ARRAY
          array_literal:
          - start_square_bracket: '['
          - expression:
              array_literal:
              - start_square_bracket: '['
              - expression:
                  literal: "'meeting'"
              - comma: ','
              - expression:
                  literal: "'lunch'"
              - end_square_bracket: ']'
          - comma: ','
          - expression:
              array_literal:
              - start_square_bracket: '['
              - expression:
                  literal: "'training'"
              - comma: ','
              - expression:
                  literal: "'presentation'"
              - end_square_bracket: ']'
          - end_square_bracket: ']'
- statement_terminator: ;
- statement:
    create_table_statement:
    - keyword: CREATE
    - keyword: TABLE
    - table_reference:
        identifier: sal_emp
    - bracketed:
      - start_bracket: (
      - column_reference:
          identifier: name
      - data_type:
          keyword: text
      - comma: ','
      - column_reference:
          identifier: pay_by_quarter
      - data_type:
          keyword: integer
          start_square_bracket: '['
          end_square_bracket: ']'
      - comma: ','
      - column_reference:
          identifier: schedule
      - data_type:
        - keyword: text
        - start_square_bracket: '['
        - end_square_bracket: ']'
        - start_square_bracket: '['
        - end_square_bracket: ']'
      - end_bracket: )
- statement_terminator: ;
- statement:
    create_table_statement:
    - keyword: CREATE
    - keyword: TABLE
    - table_reference:
        identifier: tictactoe
    - bracketed:
        start_bracket: (
        column_reference:
          identifier: squares
        data_type:
        - keyword: integer
        - start_square_bracket: '['
        - expression:
            literal: '3'
        - end_square_bracket: ']'
        - start_square_bracket: '['
        - expression:
            literal: '3'
        - end_square_bracket: ']'
        end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          wildcard_expression:
            wildcard_identifier:
              star: '*'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: sal_emp
      where_clause:
        keyword: WHERE
        expression:
        - column_reference:
            identifier: pay_by_quarter
        - array_accessor:
            start_square_bracket: '['
            literal: '1'
            end_square_bracket: ']'
        - comparison_operator:
            raw_comparison_operator: '='
        - literal: '10000'
        - binary_operator: OR
        - column_reference:
            identifier: pay_by_quarter
        - array_accessor:
            start_square_bracket: '['
            literal: '2'
            end_square_bracket: ']'
        - comparison_operator:
            raw_comparison_operator: '='
        - literal: '10000'
        - binary_operator: OR
        - column_reference:
            identifier: pay_by_quarter
        - array_accessor:
            start_square_bracket: '['
            literal: '3'
            end_square_bracket: ']'
        - comparison_operator:
            raw_comparison_operator: '='
        - literal: '10000'
        - binary_operator: OR
        - column_reference:
            identifier: pay_by_quarter
        - array_accessor:
            start_square_bracket: '['
            literal: '4'
            end_square_bracket: ']'
        - comparison_operator:
            raw_comparison_operator: '='
        - literal: '10000'
- statement_terminator: ;
- statement:
    insert_statement:
    - keyword: INSERT
    - keyword: INTO
    - table_reference:
        identifier: sal_emp
    - values_clause:
        keyword: VALUES
        bracketed:
        - start_bracket: (
        - expression:
            literal: "'Bill'"
        - comma: ','
        - expression:
            keyword: ARRAY
            array_literal:
            - start_square_bracket: '['
            - expression:
                literal: '10000'
            - comma: ','
            - expression:
                literal: '10000'
            - comma: ','
            - expression:
                literal: '10000'
            - comma: ','
            - expression:
                literal: '10000'
            - end_square_bracket: ']'
        - comma: ','
        - expression:
            keyword: ARRAY
            array_literal:
            - start_square_bracket: '['
            - expression:
                array_literal:
                - start_square_bracket: '['
                - expression:
                    literal: "'meeting'"
                - comma: ','
                - expression:
                    literal: "'lunch'"
                - end_square_bracket: ']'
            - comma: ','
            - expression:
                array_literal:
                - start_square_bracket: '['
                - expression:
                    literal: "'training'"
                - comma: ','
                - expression:
                    literal: "'presentation'"
                - end_square_bracket: ']'
            - end_square_bracket: ']'
        - end_bracket: )
- statement_terminator: ;
- statement:
    insert_statement:
    - keyword: INSERT
    - keyword: INTO
    - table_reference:
        identifier: sal_emp
    - values_clause:
        keyword: VALUES
        bracketed:
        - start_bracket: (
        - expression:
            literal: "'Carol'"
        - comma: ','
        - expression:
            keyword: ARRAY
            array_literal:
            - start_square_bracket: '['
            - expression:
                literal: '20000'
            - comma: ','
            - expression:
                literal: '25000'
            - comma: ','
            - expression:
                literal: '25000'
            - comma: ','
            - expression:
                literal: '25000'
            - end_square_bracket: ']'
        - comma: ','
        - expression:
            keyword: ARRAY
            array_literal:
            - start_square_bracket: '['
            - expression:
                array_literal:
                - start_square_bracket: '['
                - expression:
                    literal: "'breakfast'"
                - comma: ','
                - expression:
                    literal: "'consulting'"
                - end_square_bracket: ']'
            - comma: ','
            - expression:
                array_literal:
                - start_square_bracket: '['
                - expression:
                    literal: "'meeting'"
                - comma: ','
                - expression:
                    literal: "'lunch'"
                - end_square_bracket: ']'
            - end_square_bracket: ']'
        - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          column_reference:
            identifier: name
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: sal_emp
      where_clause:
        keyword: WHERE
        expression:
        - column_reference:
            identifier: pay_by_quarter
        - array_accessor:
            start_square_bracket: '['
            literal: '1'
            end_square_bracket: ']'
        - comparison_operator:
          - raw_comparison_operator: <
          - raw_comparison_operator: '>'
        - column_reference:
            identifier: pay_by_quarter
        - array_accessor:
            start_square_bracket: '['
            literal: '2'
            end_square_bracket: ']'
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          column_reference:
            identifier: schedule
          array_accessor:
          - start_square_bracket: '['
          - literal: '1'
          - slice: ':'
          - literal: '2'
          - end_square_bracket: ']'
          - start_square_bracket: '['
          - literal: '1'
          - slice: ':'
          - literal: '1'
          - end_square_bracket: ']'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: sal_emp
      where_clause:
        keyword: WHERE
        expression:
          column_reference:
            identifier: name
          comparison_operator:
            raw_comparison_operator: '='
          literal: "'Bill'"
- statement_terminator: ;
- statement:
    update_statement:
      keyword: UPDATE
      table_reference:
        identifier: sal_emp
      set_clause_list:
        keyword: SET
        set_clause:
          column_reference:
            identifier: pay_by_quarter
          array_accessor:
            start_square_bracket: '['
            literal: '4'
            end_square_bracket: ']'
          comparison_operator:
            raw_comparison_operator: '='
          literal: '15000'
      where_clause:
        keyword: WHERE
        expression:
          column_reference:
            identifier: name
          comparison_operator:
            raw_comparison_operator: '='
          literal: "'Bill'"
- statement_terminator: ;
- statement:
    update_statement:
      keyword: UPDATE
      table_reference:
        identifier: sal_emp
      set_clause_list:
        keyword: SET
        set_clause:
          column_reference:
            identifier: pay_by_quarter
          array_accessor:
          - start_square_bracket: '['
          - literal: '1'
          - slice: ':'
          - literal: '2'
          - end_square_bracket: ']'
          comparison_operator:
            raw_comparison_operator: '='
          literal: "'{27000,27000}'"
      where_clause:
        keyword: WHERE
        expression:
          column_reference:
            identifier: name
          comparison_operator:
            raw_comparison_operator: '='
          literal: "'Carol'"
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: array_dims
            bracketed:
              start_bracket: (
              expression:
              - keyword: ARRAY
              - array_literal:
                - start_square_bracket: '['
                - expression:
                    literal: '1'
                - comma: ','
                - expression:
                    literal: '2'
                - end_square_bracket: ']'
              - binary_operator:
                - pipe: '|'
                - pipe: '|'
              - keyword: ARRAY
              - array_literal:
                - start_square_bracket: '['
                - expression:
                    literal: '3'
                - comma: ','
                - expression:
                    literal: '4'
                - comma: ','
                - expression:
                    literal: '5'
                - end_square_bracket: ']'
              end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: array_dims
            bracketed:
              start_bracket: (
              expression:
              - keyword: ARRAY
              - array_literal:
                - start_square_bracket: '['
                - expression:
                    literal: '1'
                - comma: ','
                - expression:
                    literal: '2'
                - end_square_bracket: ']'
              - binary_operator:
                - pipe: '|'
                - pipe: '|'
              - keyword: ARRAY
              - array_literal:
                - start_square_bracket: '['
                - expression:
                    array_literal:
                    - start_square_bracket: '['
                    - expression:
                        literal: '3'
                    - comma: ','
                    - expression:
                        literal: '4'
                    - end_square_bracket: ']'
                - comma: ','
                - expression:
                    array_literal:
                    - start_square_bracket: '['
                    - expression:
                        literal: '5'
                    - comma: ','
                    - expression:
                        literal: '6'
                    - end_square_bracket: ']'
                - end_square_bracket: ']'
              end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
            keyword: ARRAY
            array_literal:
            - start_square_bracket: '['
            - expression:
                literal: '1'
            - comma: ','
            - expression:
                literal: '2'
            - end_square_bracket: ']'
            binary_operator:
            - pipe: '|'
            - pipe: '|'
            literal: "'{3, 4}'"
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          function:
            function_name:
              function_name_identifier: array_position
            bracketed:
            - start_bracket: (
            - expression:
                keyword: ARRAY
                array_literal:
                - start_square_bracket: '['
                - expression:
                    literal: "'sun'"
                - comma: ','
                - expression:
                    literal: "'mon'"
                - comma: ','
                - expression:
                    literal: "'tue'"
                - comma: ','
                - expression:
                    literal: "'wed'"
                - comma: ','
                - expression:
                    literal: "'thu'"
                - comma: ','
                - expression:
                    literal: "'fri'"
                - comma: ','
                - expression:
                    literal: "'sat'"
                - end_square_bracket: ']'
            - comma: ','
            - expression:
                literal: "'mon'"
            - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          column_reference:
            identifier: f1
          array_accessor:
          - start_square_bracket: '['
          - literal: '1'
          - end_square_bracket: ']'
          - start_square_bracket: '['
          - numeric_literal:
              sign_indicator: '-'
              literal: '2'
          - end_square_bracket: ']'
          - start_square_bracket: '['
          - literal: '3'
          - end_square_bracket: ']'
          alias_expression:
            keyword: AS
            identifier: e1
      - comma: ','
      - select_clause_element:
          column_reference:
            identifier: f1
          array_accessor:
          - start_square_bracket: '['
          - literal: '1'
          - end_square_bracket: ']'
          - start_square_bracket: '['
          - numeric_literal:
              sign_indicator: '-'
              literal: '1'
          - end_square_bracket: ']'
          - start_square_bracket: '['
          - literal: '5'
          - end_square_bracket: ']'
          alias_expression:
            keyword: AS
            identifier: e2
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              bracketed:
                start_bracket: (
                select_statement:
                  select_clause:
                    keyword: SELECT
                    select_clause_element:
                      expression:
                        literal: "'[1:1][-2:-1][3:5]={{{1,2,3},{4,5,6}}}'"
                        cast_expression:
                          casting_operator: '::'
                          data_type:
                            keyword: int
                            start_square_bracket: '['
                            end_square_bracket: ']'
                      alias_expression:
                        keyword: AS
                        identifier: f1
                end_bracket: )
            alias_expression:
              keyword: AS
              identifier: ss
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
            function:
              function_name:
                function_name_identifier: SUM
              bracketed:
                start_bracket: (
                expression:
                  case_expression:
                  - keyword: CASE
                  - when_clause:
                    - keyword: WHEN
                    - expression:
                        column_reference:
                          identifier: direction
                        comparison_operator:
                          raw_comparison_operator: '='
                        literal: "'forward'"
                    - keyword: THEN
                    - expression:
                        column_reference:
                          identifier: unit
                  - else_clause:
                      keyword: ELSE
                      expression:
                        literal: '0'
                  - keyword: END
                end_bracket: )
            binary_operator: '*'
            bracketed:
              start_bracket: (
              expression:
                function:
                  function_name:
                    function_name_identifier: MAX
                  bracketed:
                    start_bracket: (
                    expression:
                      keyword: ARRAY
                      array_literal:
                      - start_square_bracket: '['
                      - expression:
                          column_reference:
                            identifier: id
                      - comma: ','
                      - expression:
                          column_reference:
                            identifier: vertical
                      - end_square_bracket: ']'
                    end_bracket: )
              end_bracket: )
            array_accessor:
              start_square_bracket: '['
              literal: '2'
              end_square_bracket: ']'
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: direction_with_vertical_change
