# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 6b7cba331bbdc7f1b2f668daf4b17415a803eecd32c34e258599011135a582c4
file:
  statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          literal: 'TRUE'
          alias_expression:
            keyword: AS
            identifier: col1
      - comma: ','
      - select_clause_element:
          function:
            keyword: SAFE
            dot: .
            function_name:
              function_name_identifier: SUBSTR
            bracketed:
            - start_bracket: (
            - expression:
                literal: "'foo'"
            - comma: ','
            - expression:
                literal: '0'
            - comma: ','
            - expression:
                numeric_literal:
                  sign_indicator: '-'
                  literal: '2'
            - end_bracket: )
          alias_expression:
            keyword: AS
            identifier: col2
      - comma: ','
      - select_clause_element:
          function:
            keyword: SAFE
            dot: .
            function_name:
              function_name_identifier: DATEADD
            bracketed:
            - start_bracket: (
            - date_part: DAY
            - comma: ','
            - expression:
                numeric_literal:
                  sign_indicator: '-'
                  literal: '2'
            - comma: ','
            - expression:
                bare_function: CURRENT_DATE
            - end_bracket: )
      - comma: ','
      - select_clause_element:
          function:
            keyword: SAFE
            dot: .
            function_name:
              function_name_identifier: MY_FUNCTION
            bracketed:
              start_bracket: (
              expression:
                column_reference:
                  identifier: column1
              end_bracket: )
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: table1
  statement_terminator: ;
