# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 19fbec07f08aad273d0e46f92f426e3d90cd51654588e1747070639a26787256
file:
  statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          expression:
            array_literal:
              start_square_bracket: '['
              end_square_bracket: ']'
      - comma: ','
      - select_clause_element:
          expression:
            array_literal:
              start_square_bracket: '['
              expression:
                literal: 'false'
              end_square_bracket: ']'
      - comma: ','
      - select_clause_element:
          expression:
            keyword: ARRAY
            start_angle_bracket: <
            data_type:
              data_type_identifier: BOOLEAN
            end_angle_bracket: '>'
            array_literal:
              start_square_bracket: '['
              expression:
                literal: 'false'
              end_square_bracket: ']'
      - comma: ','
      - select_clause_element:
          expression:
            array_literal:
              start_square_bracket: '['
              expression:
                literal: "'a'"
              end_square_bracket: ']'
          alias_expression:
            keyword: AS
            identifier: strcol1
      - comma: ','
      - select_clause_element:
          expression:
            keyword: ARRAY
            start_angle_bracket: <
            data_type:
              data_type_identifier: string
            end_angle_bracket: '>'
            array_literal:
              start_square_bracket: '['
              expression:
                literal: "'b'"
              end_square_bracket: ']'
          alias_expression:
            keyword: AS
            identifier: strcol2
      - comma: ','
      - select_clause_element:
          expression:
            array_literal:
              start_square_bracket: '['
              expression:
                literal: '1.0'
              end_square_bracket: ']'
          alias_expression:
            keyword: AS
            identifier: numcol1
      - comma: ','
      - select_clause_element:
          expression:
            keyword: ARRAY
            start_angle_bracket: <
            data_type:
              data_type_identifier: NUMERIC
            end_angle_bracket: '>'
            array_literal:
              start_square_bracket: '['
              expression:
                literal: '1.4'
              end_square_bracket: ']'
          alias_expression:
            keyword: AS
            identifier: numcol2
      - comma: ','
      - select_clause_element:
          expression:
            array_literal:
              start_square_bracket: '['
              expression:
                typeless_struct:
                  keyword: STRUCT
                  bracketed:
                  - start_bracket: (
                  - literal: '"Rudisha"'
                  - alias_expression:
                      keyword: AS
                      identifier: name
                  - comma: ','
                  - expression:
                      array_literal:
                      - start_square_bracket: '['
                      - expression:
                          literal: '23.4'
                      - comma: ','
                      - expression:
                          literal: '26.3'
                      - comma: ','
                      - expression:
                          literal: '26.4'
                      - comma: ','
                      - expression:
                          literal: '26.1'
                      - end_square_bracket: ']'
                  - alias_expression:
                      keyword: AS
                      identifier: splits
                  - end_bracket: )
              end_square_bracket: ']'
          alias_expression:
            keyword: AS
            identifier: struct1
      - comma: ','
      - select_clause_element:
          expression:
            column_reference:
            - identifier: col1
            - dot: .
            - identifier: obj1
            array_accessor:
              start_square_bracket: '['
              expression:
                function:
                  function_name:
                    function_name_identifier: safe_offset
                  bracketed:
                    start_bracket: (
                    expression:
                      literal: '1'
                    end_bracket: )
              end_square_bracket: ']'
            semi_structured_expression:
              dot: .
              identifier: a
          alias_expression:
            keyword: AS
            identifier: struct_safe_offset
