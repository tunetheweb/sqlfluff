# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: 4d320a183718cfaa36e7f5d01949fb12632f9236161c73e693d485b3c3061dfb
file:
- statement:
    select_statement:
      select_clause:
      - keyword: select
      - select_clause_element:
          column_reference:
          - identifier: some_table
          - dot: .
          - identifier: foo_id
      - comma: ','
      - select_clause_element:
          function:
            function_name:
              function_name_identifier: array
            bracketed:
              start_bracket: (
              expression:
                select_statement:
                  select_clause:
                    keyword: select
                    select_clause_modifier:
                    - keyword: as
                    - keyword: struct
                    select_clause_element:
                      wildcard_expression:
                        wildcard_identifier:
                          star: '*'
                  from_clause:
                    keyword: from
                    from_expression:
                      from_expression_element:
                        table_expression:
                          table_reference:
                            identifier: another_table
                  where_clause:
                    keyword: where
                    expression:
                    - column_reference:
                      - identifier: another_table
                      - dot: .
                      - identifier: foo_id
                    - comparison_operator:
                        raw_comparison_operator: '='
                    - column_reference:
                      - identifier: some_table
                      - dot: .
                      - identifier: foo_id
              end_bracket: )
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: another_table
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: select
      - select_clause_modifier:
        - keyword: as
        - keyword: struct
      - select_clause_element:
          literal: "'1'"
          alias_expression:
            keyword: as
            identifier: bb
      - comma: ','
      - select_clause_element:
          literal: '2'
          alias_expression:
            keyword: as
            identifier: aa
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: select
        select_clause_element:
          expression:
            typeless_struct:
              keyword: struct
              bracketed:
              - start_bracket: (
              - column_reference:
                - identifier: bar
                - dot: .
                - identifier: bar_id
              - alias_expression:
                  keyword: as
                  identifier: id
              - comma: ','
              - column_reference:
                - identifier: bar
                - dot: .
                - identifier: bar_name
              - alias_expression:
                  keyword: as
                  identifier: bar
              - end_bracket: )
          alias_expression:
            keyword: as
            identifier: bar
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: foo
          join_clause:
          - keyword: left
          - keyword: join
          - from_expression_element:
              table_expression:
                table_reference:
                  identifier: bar
          - join_on_condition:
              keyword: 'on'
              expression:
              - column_reference:
                - identifier: bar
                - dot: .
                - identifier: foo_id
              - comparison_operator:
                  raw_comparison_operator: '='
              - column_reference:
                - identifier: foo
                - dot: .
                - identifier: foo_id
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          column_reference:
            identifier: col_1
      - comma: ','
      - select_clause_element:
          column_reference:
            identifier: col_2
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              function:
                function_name:
                  function_name_identifier: UNNEST
                bracketed:
                  start_bracket: (
                  expression:
                    keyword: ARRAY
                    start_angle_bracket: <
                    data_type:
                    - keyword: STRUCT
                    - start_angle_bracket: <
                    - parameter: col_1
                    - data_type:
                        data_type_identifier: STRING
                    - comma: ','
                    - parameter: col_2
                    - data_type:
                        data_type_identifier: STRING
                    - end_angle_bracket: '>'
                    end_angle_bracket: '>'
                    array_literal:
                    - start_square_bracket: '['
                    - expression:
                        bracketed:
                        - start_bracket: (
                        - literal: "'hello'"
                        - comma: ','
                        - literal: "'world'"
                        - end_bracket: )
                    - comma: ','
                    - expression:
                        bracketed:
                        - start_bracket: (
                        - literal: "'hi'"
                        - comma: ','
                        - literal: "'there'"
                        - end_bracket: )
                    - end_square_bracket: ']'
                  end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: SELECT
      - select_clause_element:
          expression:
            keyword: STRUCT
            start_angle_bracket: <
            data_type:
              data_type_identifier: int64
            end_angle_bracket: '>'
            bracketed:
              start_bracket: (
              expression:
                literal: '5'
              end_bracket: )
      - comma: ','
      - select_clause_element:
          expression:
            keyword: STRUCT
            start_angle_bracket: <
            data_type:
              data_type_identifier: date
            end_angle_bracket: '>'
            bracketed:
              start_bracket: (
              expression:
                literal: '"2011-05-05"'
              end_bracket: )
      - comma: ','
      - select_clause_element:
          expression:
          - keyword: STRUCT
          - start_angle_bracket: <
          - parameter: x
          - data_type:
              data_type_identifier: int64
          - comma: ','
          - parameter: y
          - data_type:
              data_type_identifier: string
          - end_angle_bracket: '>'
          - bracketed:
            - start_bracket: (
            - expression:
                literal: '1'
            - comma: ','
            - expression:
                column_reference:
                - identifier: t
                - dot: .
                - identifier: str_col
            - end_bracket: )
      - comma: ','
      - select_clause_element:
          expression:
            keyword: STRUCT
            start_angle_bracket: <
            data_type:
              data_type_identifier: int64
            end_angle_bracket: '>'
            bracketed:
              start_bracket: (
              expression:
                column_reference:
                  identifier: int_col
              end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: SELECT
        select_clause_element:
          expression:
            typeless_struct:
              keyword: STRUCT
              bracketed:
              - start_bracket: (
              - column_reference:
                  identifier: some_field
              - comma: ','
              - column_reference:
                  identifier: some_other_field
              - end_bracket: )
          alias_expression:
            keyword: AS
            identifier: col
      from_clause:
        keyword: FROM
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: table
- statement_terminator: ;
