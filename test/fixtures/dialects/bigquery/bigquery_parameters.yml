# YML test files are auto-generated from SQL files and should not be edited by
# hand. To help enforce this, the "hash" field in the file must match a hash
# computed by SQLFluff when running the tests. Please run
# `python test/generate_parse_fixture_yml.py`  to generate them after adding or
# altering SQL files.
_hash: e37d8151b0873e9083d1ac467a974a194f7f4d225fba9a64b7cd53ed4e3cde27
file:
- statement:
    select_statement:
      select_clause:
        keyword: select
        select_clause_element:
          literal: '"1"'
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: x
      where_clause:
        keyword: where
        expression:
          column_reference:
            identifier: y
          comparison_operator:
            raw_comparison_operator: '='
          parameterized_expression:
            literal: '@z_test1'
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: select
        select_clause_element:
          function:
            function_name:
              function_name_identifier: datetime_trunc
            bracketed:
              start_bracket: (
              expression:
                parameterized_expression:
                  literal: '@z2'
              comma: ','
              date_part: week
              end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: select
        select_clause_element:
          function:
            function_name:
              function_name_identifier: datetime_trunc
            bracketed:
              start_bracket: (
              expression:
                parameterized_expression:
                  literal: '@_ab'
              comma: ','
              date_part: week
              end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: select
        select_clause_element:
          function:
            function_name:
              function_name_identifier: datetime_trunc
            bracketed:
              start_bracket: (
              expression:
                parameterized_expression:
                  literal: '@a'
              comma: ','
              date_part: week
              end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: select
        select_clause_element:
          function:
            function_name:
              function_name_identifier: parse_date
            bracketed:
              start_bracket: (
              expression:
                literal: '"%Y%m"'
              comma: ','
              date_part: year
              end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: select
        select_clause_element:
          literal: '"1"'
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: x
      where_clause:
        keyword: where
        expression:
          column_reference:
            identifier: y
          comparison_operator:
            raw_comparison_operator: '='
          parameterized_expression:
            question_mark: '?'
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
        keyword: select
        select_clause_element:
          function:
            function_name:
              function_name_identifier: concat
            bracketed:
            - start_bracket: (
            - expression:
                literal: '"1"'
            - comma: ','
            - expression:
                parameterized_expression:
                  question_mark: '?'
            - end_bracket: )
- statement_terminator: ;
- statement:
    select_statement:
      select_clause:
      - keyword: select
      - select_clause_element:
          column_reference:
            identifier: id
      - comma: ','
      - select_clause_element:
          function:
            function_name:
              function_name_identifier: datetime_trunc
            bracketed:
              start_bracket: (
              expression:
                parameterized_expression:
                  literal: '@z2'
              comma: ','
              date_part: week
              end_bracket: )
      - comma: ','
      - select_clause_element:
          function:
            function_name:
              function_name_identifier: sum
            bracketed:
              start_bracket: (
              expression:
                column_reference:
                  identifier: something
              end_bracket: )
            over_clause:
              keyword: over
              bracketed:
                start_bracket: (
                window_specification:
                  partitionby_clause:
                  - keyword: partition
                  - keyword: by
                  - expression:
                      column_reference:
                        identifier: some_id
                  orderby_clause:
                  - keyword: order
                  - keyword: by
                  - column_reference:
                      identifier: some_date
                  frame_clause:
                  - keyword: rows
                  - keyword: BETWEEN
                  - parameterized_expression:
                      literal: '@query_parameter'
                  - keyword: PRECEDING
                  - binary_operator: AND
                  - keyword: CURRENT
                  - keyword: ROW
                end_bracket: )
          alias_expression:
            keyword: as
            identifier: some_sum
      from_clause:
        keyword: from
        from_expression:
          from_expression_element:
            table_expression:
              table_reference:
                identifier: some_table
      where_clause:
        keyword: where
        expression:
          column_reference:
            identifier: some_column
          comparison_operator:
            raw_comparison_operator: '='
          parameterized_expression:
            literal: '@query_parameter2'
- statement_terminator: ;
